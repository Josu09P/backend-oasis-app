# üöÄ Pipeline de CI/CD para despliegue local con un Self-Hosted Runner

name: Deploy Locally with Self-Hosted Runner

on:
  push:
    branches: [ "main" ]
  workflow_dispatch:

env:
  DOCKER_PROJECT_NAME: 'decorhouse'
  APP_CONTAINER_NAME: 'decor-house-app'
  DB_CONTAINER_NAME: 'mysql-decor-house-prod'
  DB_NAME: 'decor_house_prod'
  DB_USER: 'root'
  DB_PASSWORD: 'admin123'

jobs:
  build-and-deploy:
    name: Build and Deploy Locally
    runs-on: self-hosted

    steps:
      # 1. Clonar el repositorio
      - name: Checkout repository
        uses: actions/checkout@v4

      # 2. Configurar Java y Maven
      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'
          cache: maven

      # 3. Compilar el proyecto y generar .jar + Jacoco
      - name: Build with Maven
        run: mvn -B clean package -DskipTests

      # 4. An√°lisis SonarQube usando Maven (reemplazo correcto del paso anterior)
      - name: SonarQube Analysis with Maven
        run: mvn verify sonar:sonar -Dsonar.projectKey=decor-house -Dsonar.host.url=${{ secrets.SONAR_HOST_URL }} -Dsonar.login=${{ secrets.SONAR_TOKEN }}

      # 5. Desplegar usando Docker Compose
      - name: Deploy with Docker Compose
        run: |
          echo "‚úÖ Iniciando despliegue..."
          cd docker

          echo "üßπ Limpiando anterior despliegue..."
          docker compose -p ${{ env.DOCKER_PROJECT_NAME }} down -v --remove-orphans || true

          echo "üèóÔ∏è Build y up de contenedores..."
          docker compose -p ${{ env.DOCKER_PROJECT_NAME }} up -d --build

          echo "‚è≥ Esperando DB..."
          sleep 30

          echo "üíæ Ejecutando script SQL..."
          docker exec -i ${{ env.DB_CONTAINER_NAME }} mysql -u${{ env.DB_USER }} -p${{ env.DB_PASSWORD }} ${{ env.DB_NAME }} < ../sql/init.sql

          echo "üîç Estado contenedores:"
          docker compose -p ${{ env.DOCKER_PROJECT_NAME }} ps

          echo "üìÑ Logs de la app:"
          docker logs --tail 100 ${{ env.APP_CONTAINER_NAME }}

      # 6. Confirmaci√≥n final
      - name: ‚úÖ Pipeline Completado
        run: echo "üéâ Despliegue exitoso."
