# .github/workflows/deploy.yml
# üöÄ CI/CD Pipeline para despliegue local con an√°lisis SonarQube

name: Deploy Locally with Self-Hosted Runner

on:
  push:
    branches: [ "main" ]
  workflow_dispatch: # Permite ejecutar el pipeline manualmente

# Variables de entorno para Docker
env:
  DOCKER_PROJECT_NAME: 'decorhouse'
  APP_CONTAINER_NAME: 'decor-house-app'
  DB_CONTAINER_NAME: 'mysql-decor-house-prod'
  DB_NAME: 'decor_house_prod'
  DB_USER: 'root'
  DB_PASSWORD: 'admin123'

jobs:
  build-and-deploy:
    name: Build and Deploy Locally
    runs-on: self-hosted

    steps:
      # 1. Descargar el c√≥digo del repositorio
      - name: Checkout repository
        uses: actions/checkout@v4

      # 2. Configurar Java 17 con Maven
      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'
          cache: maven

      # 3. Compilar el proyecto (sin pruebas)
      - name: Build with Maven
        run: mvn -B clean package -DskipTests

      # 4. An√°lisis de c√≥digo con SonarQube (si tienes servidor corriendo en 9100)
      - name: SonarQube Scan
        uses: sonarsource/sonarqube-scan-action@master
        with:
          projectBaseDir: .
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
          SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}

      - name: SonarQube Quality Gate
        uses: sonarsource/sonarqube-quality-gate-action@master
        timeout-minutes: 10
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}

      # 5. Despliegue usando Docker Compose
      - name: Deploy with Docker Compose
        run: |
          echo "‚úÖ Iniciando despliegue en el runner local..."
          cd docker

          echo "üßπ Limpiando despliegue anterior (si existe)..."
          docker compose -p ${{ env.DOCKER_PROJECT_NAME }} down -v --remove-orphans || echo "‚ö†Ô∏è No se encontr√≥ un despliegue anterior para limpiar."

          echo "üèóÔ∏è Construyendo y levantando los servicios..."
          docker compose -p ${{ env.DOCKER_PROJECT_NAME }} up -d --build

          echo "‚è≥ Esperando 30 segundos para que la DB se estabilice..."
          sleep 30

          echo "üíæ Inicializando base de datos desde init.sql..."
          docker exec -i ${{ env.DB_CONTAINER_NAME }} mysql -u${{ env.DB_USER }} -p${{ env.DB_PASSWORD }} ${{ env.DB_NAME }} < ../sql/init.sql

          echo "üîç Verificando estado de los contenedores..."
          docker compose -p ${{ env.DOCKER_PROJECT_NAME }} ps

          echo "üóíÔ∏è Mostrando los √∫ltimos logs de la aplicaci√≥n:"
          docker logs --tail 100 ${{ env.APP_CONTAINER_NAME }}

      # 6. Confirmaci√≥n final
      - name: ‚úÖ Pipeline completado
        run: echo "üéâ Todo sali√≥ bien, ¬°pipeline ejecutado exitosamente!"
